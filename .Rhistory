plot.margin = unit(c(0,1,0,2), "cm")) +
labs(x = "",
y = "Program Size") +
scale_fill_manual(values = cbbPalette,
name = 'Method',
labels=c("Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Unchanged", "Program"))
ggsave(paste0(path_to_plots,'Problem_by_Size_bar_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
num_initial_solutions <- all_runs %>%
filter(method != 'none',
type == 'unsimplified') %>%
group_by(problem) %>%
dplyr::summarise(init_solution_count = n()) %>%
mutate(prob_name = str_c(problem, " (", init_solution_count/5, ")")) %>%
mutate(prob_name = ifelse(prob_name == 'Compare String Lengths (60)', 'Cmp Str Lengths (60)', prob_name))
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
inner_join(num_initial_solutions, by = 'problem') %>%
arrange(desc(pct_gener))
horiz_lines_df$prob_name <- factor(horiz_lines_df$prob_name, levels = horiz_lines_df$prob_name)
horiz_lines_df$x1 <- seq(0.55, 23.55, 1)
horiz_lines_df$x2 <- seq(1.45, 24.45, 1)
df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable != 'none')
df$prob_name <- factor(df$prob_name, levels = horiz_lines_df$prob_name)
num_initial_solutions <- all_runs %>%
filter(method != 'none',
type == 'unsimplified') %>%
group_by(problem) %>%
dplyr::summarise(init_solution_count = n()) %>%
mutate(prob_name = str_c(problem, " (", init_solution_count/5, ")")) %>%
mutate(prob_name = ifelse(prob_name == 'Compare String Lengths (60)', 'Cmp Str Lengths (60)', prob_name))
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
inner_join(num_initial_solutions, by = 'problem') %>%
arrange(desc(pct_gener))
horiz_lines_df$prob_name <- factor(horiz_lines_df$prob_name, levels = horiz_lines_df$prob_name)
horiz_lines_df$x1 <- seq(0.55, 23.55, 1)
horiz_lines_df$x2 <- seq(1.45, 24.45, 1)
df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable != 'none') %>%
inner_join(num_initial_solutions, by = 'problem')
df$prob_name <- factor(df$prob_name, levels = horiz_lines_df$prob_name)
df %>%
ggplot(aes(x = prob_name,
y = pct_gener,
fill = variable)) +
geom_bar(stat = "identity",
position = "dodge") +
geom_rect(data = horiz_lines_df,
aes(xmin = x1,
xmax = x2,
ymin = 0,
ymax = pct_gener),
fill = '#E5E5E5') +
geom_bar(stat = "identity",
position = "dodge") +
geom_segment(data = horiz_lines_df,
aes(x = x1,
y = pct_gener,
xend = x2,
yend = pct_gener),
size = 1.5) +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text.x = element_text(angle = 25, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
legend.position="top",
legend.text = element_text(size = 18),
legend.title = element_text(size = 20)) +
labs(x = "",
y = "% Generalized") +
scale_fill_manual(values = cbbPalette,
name = 'Method',
labels=c("Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Unchanged", "Program")) +
scale_x_discrete(labels =  levels(horiz_lines_df$prob_name))
ggsave(paste0(path_to_plots,'Problem_by_PcntGen_bar_no_legend_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
num_initial_solutions <- all_runs %>%
filter(method != 'none',
type == 'unsimplified') %>%
group_by(problem) %>%
dplyr::summarise(init_solution_count = n()) %>%
mutate(prob_name = str_c(problem, " (", init_solution_count/5, ")")) %>%
mutate(prob_name = ifelse(prob_name == 'Compare String Lengths (60)', 'Cmp Str Lengths (60)', prob_name))
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
inner_join(num_initial_solutions, by = 'problem') %>%
arrange(desc(pct_gener))
horiz_lines_df$prob_name <- factor(horiz_lines_df$prob_name, levels = horiz_lines_df$prob_name)
horiz_lines_df$x1 <- seq(0.55, 23.55, 1)
horiz_lines_df$x2 <- seq(1.45, 24.45, 1)
df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable != 'none') %>%
inner_join(num_initial_solutions, by = 'problem')
df$prob_name <- factor(df$prob_name, levels = horiz_lines_df$prob_name)
df %>%
ggplot(aes(x = prob_name,
y = pct_gener,
fill = variable)) +
geom_bar(stat = "identity",
position = "dodge") +
geom_rect(data = horiz_lines_df,
aes(xmin = x1,
xmax = x2,
ymin = 0,
ymax = pct_gener),
fill = '#E5E5E5') +
geom_bar(stat = "identity",
position = "dodge") +
geom_segment(data = horiz_lines_df,
aes(x = x1,
y = pct_gener,
xend = x2,
yend = pct_gener),
size = 1.5) +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text.x = element_text(angle = 25, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
legend.position="top",
legend.text = element_text(size = 18),
legend.title = element_text(size = 20),
plot.margin = unit(c(0,1,0,1), "cm")) +
labs(x = "",
y = "% Generalized") +
scale_fill_manual(values = cbbPalette,
name = 'Method',
labels=c("Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Unchanged", "Program")) +
scale_x_discrete(labels =  levels(horiz_lines_df$prob_name))
ggsave(paste0(path_to_plots,'Problem_by_PcntGen_bar_no_legend_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
num_initial_solutions <- all_runs %>%
filter(method != 'none',
type == 'unsimplified') %>%
group_by(problem) %>%
dplyr::summarise(init_solution_count = n()) %>%
mutate(prob_name = str_c(problem, " (", init_solution_count/5, ")")) %>%
mutate(prob_name = ifelse(prob_name == 'Compare String Lengths (60)', 'Cmp Str Lengths (60)', prob_name))
library(plyr)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(reshape2)
# get filenames of all csvs
path_to_csvs <- "~/Google_Drive/Simplification-for-generalization/simplification-data"
path_to_plots <- "~/Google_Drive/Simplification-for-generalization/final-plots/"
all_csvs <- list.files(path = path_to_csvs, pattern = "\\.csv")
# load all csvs into a single dataframe
all_runs <- data.frame()
for (filename in all_csvs) {
tmp_df <- read.csv(paste(path_to_csvs, filename, sep = '/'), stringsAsFactors = F)
colnames(tmp_df) <- sapply(colnames(tmp_df), str_trim)
s <- unlist(str_split(filename, '[.-]'))
s <- s[4:length(s)-1]
tmp_df$problem <- str_c(s, sep = '-', collapse = '-')
all_runs <<- bind_rows(all_runs, tmp_df)
}
format_problem_name <- function(x) {
s <- str_replace_all(x, "-", " ")
s <- strsplit(s, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
all_runs$problem <- sapply(all_runs$problem, format_problem_name)
# cbbPalette <- c("#E69F00", "#56B4E9", "#000000", "#009E73", "#D55E00", "#CC79A7", "#F0E442", "#0072B2")
cbbPalette <- c("#009E73", "#E69F00", "#56B4E9", "#F0E442", "#000000", "#D55E00", "#0072B2")
unsimplified_that_dont_generalize <- all_runs %>%
filter(type == "unsimplified",
testError > 0) %>%
select(log, problem) %>%
distinct()
unsimplified_that_generalize <- all_runs %>%
filter(type == "unsimplified",
testError == 0) %>%
select(log, problem) %>%
distinct()
started_generalized_lookup <- bind_rows(mutate(unsimplified_that_generalize, started_generalized = 'Generalized Pre-Simplification'),
mutate(unsimplified_that_dont_generalize, started_generalized = "Didn't Generalize Pre-Simplification"))
simp_runs <- all_runs %>%
filter(type == "simplified") %>%
group_by(method, problem) %>%
summarise(avgProgramSize = round(mean(programSize), 3)) %>%
spread(method, avgProgramSize)
prog_size_table <- all_runs %>%
filter(type == "unsimplified") %>%
group_by(problem) %>%
summarise(none = round(mean(programSize), 3)) %>%
inner_join(simp_runs, by = c("problem"))
write.csv(prog_size_table, "prog_size_table.csv")
simp_runs <- all_runs %>%
filter(type == "simplified") %>%
mutate(generalized = ifelse(testError == 0, 1, 0)) %>%
group_by(method, problem) %>%
summarise(percentGeneralized = mean(generalized)) %>%
spread(method, percentGeneralized)
perct_generalized_table <- all_runs %>%
filter(type == "unsimplified") %>%
mutate(generalized = ifelse(testError == 0, 1, 0)) %>%
group_by(problem) %>%
summarise(none = mean(generalized)) %>%
inner_join(simp_runs, by = c("problem"))
write.csv(perct_generalized_table, "perct_generalized_table.csv")
num_initial_solutions <- all_runs %>%
filter(method != 'none',
type == 'unsimplified') %>%
group_by(problem) %>%
dplyr::summarise(init_solution_count = n()) %>%
mutate(prob_name = str_c(problem, " (", init_solution_count/5, ")")) %>%
mutate(prob_name = ifelse(prob_name == 'Compare String Lengths (60)', 'Cmp Str Lengths (60)', prob_name))
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
inner_join(num_initial_solutions, by = 'problem') %>%
arrange(desc(pct_gener))
horiz_lines_df$prob_name <- factor(horiz_lines_df$prob_name, levels = horiz_lines_df$prob_name)
horiz_lines_df$x1 <- seq(0.55, 23.55, 1)
horiz_lines_df$x2 <- seq(1.45, 24.45, 1)
df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable != 'none') %>%
inner_join(num_initial_solutions, by = 'problem')
df$prob_name <- factor(df$prob_name, levels = horiz_lines_df$prob_name)
df %>%
ggplot(aes(x = prob_name,
y = pct_gener,
fill = variable)) +
geom_bar(stat = "identity",
position = "dodge") +
geom_rect(data = horiz_lines_df,
aes(xmin = x1,
xmax = x2,
ymin = 0,
ymax = pct_gener),
fill = '#E5E5E5') +
geom_bar(stat = "identity",
position = "dodge") +
geom_segment(data = horiz_lines_df,
aes(x = x1,
y = pct_gener,
xend = x2,
yend = pct_gener),
size = 1.5) +
theme_bw() +
theme(axis.title = element_text(size=20),
axis.text.x = element_text(angle = 25, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
legend.position="top",
legend.text = element_text(size = 18),
legend.title = element_text(size = 20),
plot.margin = unit(c(0,1,0,1), "cm")) +
labs(x = "",
y = "Proportion generalized") +
scale_fill_manual(values = cbbPalette,
name = 'Method',
labels=c("Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Unchanged", "Program")) +
scale_x_discrete(labels =  levels(horiz_lines_df$prob_name))
ggsave(paste0(path_to_plots,'Problem_by_PcntGen_bar_no_legend_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
arrange(desc(pct_gener))
horiz_lines_df$problem <- factor(horiz_lines_df$problem, levels = horiz_lines_df$problem)
horiz_lines_df %>%
ggplot(aes(x = reorder(problem, -pct_gener),
y = pct_gener)) +
geom_bar(stat='identity') +
theme_bw() +
theme(axis.title = element_text(size=24),
axis.text.x = element_text(angle = 25, hjust = 1, size = 18),
axis.text.y = element_text(size = 18),
legend.position="top") +
labs(x = "",
y = "Proportion generalized")
ggsave(paste0(path_to_plots,'Rct_gener_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
horiz_lines_df <- melt(perct_generalized_table,
id.vars = c("problem"),
measure.vars = c("none", "Genome", "GenomeBacktracking", "GenomeBacktrackingNoop", "GenomeNoop", "Program"),
value.name = "pct_gener") %>%
filter(variable == 'none') %>%
arrange(desc(pct_gener))
horiz_lines_df$problem <- factor(horiz_lines_df$problem, levels = horiz_lines_df$problem)
horiz_lines_df %>%
ggplot(aes(x = reorder(problem, -pct_gener),
y = pct_gener)) +
geom_bar(stat='identity') +
theme_bw() +
theme(axis.title = element_text(size=24),
axis.text.x = element_text(angle = 25, hjust = 1, size = 18),
axis.text.y = element_text(size = 18),
legend.position="top") +
labs(x = "",
y = "Proportion generalized")
ggsave(paste0(path_to_plots,'Pct_gener_SLIDE.pdf'),
units = c('in'), width = 15, height = 10)
library(rJava)
setwd("~/mm_projects/codacy-lintr/src")
lint_files <- function(files) {
for (f in files) {
lintr::lint(f, cache = paste("lint_cache", f, ".txt"))
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
lintr::lint(f, cache = paste("lint_cache", f, ".txt"))
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
print()
lintr::lint(f)
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
print(f)
lintr::lint(f)
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lintr::lint_package("src/")
setwd("~/mm_projects/codacy-lintr/src")
lintr::lint_package("src/")
getwd()
lintr::lint("src/bad_r_script.R")
lintr::lint("/src/bad_r_script.R")
lintr::lint("src/bad_r_script.R")
lintr::lint("src/bad_r_script.R")
getwd()
setwd("~/mm_projects/codacy-lintr")
lintr::lint("src/bad_r_script.R")
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
lintr::lint(f)
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
lintr::lint(f, cache = paste0("logs/", f, ".txt"))
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
lintr::lint(f, cache = paste0(f, ".txt"))
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
for (f in files) {
lintr::lint(f, cache = TRUE)
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
?lintr::lint
lint_files <- function(files) {
for (f in files) {
print(lintr::lint(f))
}
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
s <- lintr::lint("src/bad_r_script.R")
str(s)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- append(violations, lintr::lint(f))
}
violations
}
lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- append(violations, lintr::lint(f))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
l
str(l)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- c(violations, lintr::lint(f))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- c(violations, lintr::lint(f))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
str(l)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- do.call(c, list(violations, lintr::lint(f)))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations[[f]] <- lintr::lint(f)
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
str(l)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations[[f]] <- lintr::lint(f)
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
str(l)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations[[f]] <- lintr::lint(f)
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
str(l)
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- c(violations, lintr::lint(f))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
lintr::lint("src/bad_r_script_2.R")
lintr::lint("src/bad_r_script_2.R")
lintr::lint("src/bad_r_script_2.R")
lint_files <- function(files) {
violations <- list()
for (f in files) {
violations <- c(violations, lintr::lint(f))
}
violations
}
l <- lint_files(c("src/bad_r_script.R", "src/bad_r_script_2.R"))
classify_files <- function(files) {
extentensions <- strsplit(files, "[.]")
extentensions
}
classify_files("another_testing.py", "src/bad_r_script.R", "bad_r_script_2.R", "testing.py")
classify_files <- function(files) {
extentensions <- strsplit(files, "[.]")
extentensions
}
classify_files("another_testing.py", "src/bad_r_script.R", "bad_r_script_2.R", "testing.py")
classify_files(c("another_testing.py", "src/bad_r_script.R", "bad_r_script_2.R", "testing.py"))
version
?install.package
??install.package
?install.packages
.libPaths()
lintr::lint("src/bad_r_script_2.R")
?lintr::lint
lintr::lint("src/bad_r_script_2.R", linters = "unneeded_concatenation_lintr")
lintr::lint("src/bad_r_script_2.R", linters = "unneeded_concatenation_lintr")
lintr::lint("src/bad_r_script_2.R", linters = "unneeded_concatenation_linter")
lintr::lint("src/bad_r_script_2.R", linters = list(lintr::unneeded_concatenation_linter)
lintr::lint("src/bad_r_script_2.R", linters = list(lintr::unneeded_concatenation_linter))
lintr::lint("src/bad_r_script_2.R", linters = list(lintr::unneeded_concatenation_linter))
